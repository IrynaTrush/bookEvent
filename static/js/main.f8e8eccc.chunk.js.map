{"version":3,"sources":["components/header/index.js","components/layout/index.js","api/api.js","services/transfService.js","redux/actions/home.action.js","redux/actionTypes.js","redux/selectors/home.selector.js","pages/Home/index.js","components/eventList/index.js","pages/bucket/index.js","routes.js","App.js","serviceWorker.js","redux/reducers/home.reducer.js","redux/store.js","index.js"],"names":["useStyles","makeStyles","typographyStyles","flex","iconStyles","color","padding","textDecoration","transform","fontSize","transition","Header","classes","AppBar","position","Toolbar","Typography","className","to","Layout","props","Grid","container","direction","item","xs","sm","children","BASE_CONNECTION","axios","baseURL","api","data","post","get","fbObjectToArray","response","Object","keys","map","key","id","getEventsData","dispatch","a","type","fbData","events","console","log","payload","error","selectEvetns","state","homeReducer","theme","root","margin","spacing","width","display","flexWrap","flexDirection","alignItems","textField","marginBottom","simpleSelect","selectEmpty","marginTop","Home","useState","name","setName","description","setDescription","formData","useRef","date","Date","current","moment","format","eventDate","setEventDate","isDisabled","changeIsDisabled","React","time","setTime","useDispatch","history","useHistory","mappedDates","useSelector","i","index","useEffect","includes","alert","noValidate","autoComplete","TextField","label","value","onChange","e","target","valueOf","InputLabelProps","shrink","InputLabel","Select","labelId","event","MenuItem","Button","variant","onClick","preventDefault","then","push","catch","err","postNewEventData","disabled","textAlign","bullet","title","pos","EventList","card","Card","CardContent","component","style","justifyContent","Bucket","routes","path","exact","App","route","toString","Boolean","window","location","hostname","match","initialState","action","reducers","combineReducers","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.f8e8eccc.chunk.js","sourcesContent":["import React from 'react';\r\nimport { AppBar, Toolbar, Typography } from '@material-ui/core';\r\nimport EventNoteIcon from '@material-ui/icons/EventNote';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n   typographyStyles: {\r\n       flex: 1\r\n   },\r\n   iconStyles: {\r\n       color: '#fff',\r\n       padding: '0 40px',\r\n       textDecoration: 'none',\r\n       '&:hover': {\r\n        transform: 'scale(1.2)',\r\n        fontSize: '18px',\r\n        transition: 'all 0.3s'\r\n      }\r\n   }\r\n}));\r\n\r\nconst Header = () => {\r\n    const classes = useStyles();\r\n    return (\r\n        <AppBar position=\"static\">\r\n            <Toolbar>\r\n                <Typography className={classes.typographyStyles}>\r\n                   <Link to=\"/bookEvent/\" className={classes.iconStyles}>Home</Link>\r\n                </Typography>\r\n                <Link to=\"/bookEvent/bucket\" className={classes.iconStyles}><EventNoteIcon /></Link>\r\n            </Toolbar>\r\n        </AppBar>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport { Grid } from '@material-ui/core';\r\nimport Header from '../header/index';\r\n\r\nexport const Layout = (props) => {\r\n    return(\r\n       <>\r\n         <Grid container direction=\"column\">\r\n            <Grid item>\r\n                <Header />\r\n            </Grid>\r\n            <Grid item container>\r\n                <Grid item xs={0} sm={2} />\r\n                <Grid item xs={12} sm={8}>{props.children}</Grid>\r\n                <Grid item xs={0} sm={2} />\r\n            </Grid>\r\n        </Grid>\r\n       </>\r\n    );\r\n}\r\n\r\n","import * as axios from 'axios';\r\n\r\nconst BASE_CONNECTION = axios.create({\r\n    baseURL: 'https://test-task-6a600.firebaseio.com',\r\n})\r\n\r\nexport const api = {\r\n    postNewEvent: data =>  BASE_CONNECTION.post('/events.json', data),\r\n    getEvents: () => BASE_CONNECTION.get('/events.json'),\r\n};\r\n\r\n","const fbObjectToArray = (response) =>{\r\n    return Object.keys(response).map(key=>{\r\n        const item = response[key]\r\n        item.id = key        \r\n        return item})\r\n};\r\n\r\nexport default fbObjectToArray;","import {api} from '../../api/api';\r\nimport fbObjectToArray from '../../services/transfService';\r\n\r\nimport { GET_PRODUCTS_REQUEST, \r\n    ADD_EVENT_SUCCESS, ADD_EVENT_FAILED,\r\n    LOAD_EVENTS_SUCCESS, LOAD_EVENTS_FAILED,\r\n    } from '../actionTypes';\r\n\r\nexport const postNewEventData = (data, history) => (dispatch) => {\r\n    api.postNewEvent(data).then((data) => {\r\n        dispatch({\r\n            type: ADD_EVENT_SUCCESS,\r\n            payload: data,\r\n        });\r\n        history.push('/bookEvent/bucket');\r\n    }).catch((err) => {\r\n        dispatch({\r\n            type: ADD_EVENT_FAILED,\r\n            payload: err,\r\n        });\r\n    });\r\n};\r\n\r\nexport const getEventsData = () => async (dispatch) => {\r\n    dispatch({\r\n      type: GET_PRODUCTS_REQUEST,\r\n    }); \r\n    try {\r\n      const fbData = await api.getEvents();\r\n      const events = fbObjectToArray(fbData.data);\r\n      console.log(events)\r\n        dispatch({\r\n          type: LOAD_EVENTS_SUCCESS,\r\n          payload: events,\r\n        });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: LOAD_EVENTS_FAILED,\r\n        payload: err,\r\n        error: true,\r\n      });\r\n    }\r\n  };","export const ADD_EVENT_SUCCESS = 'ADD_EVENT_SUCCESS';\r\nexport const ADD_EVENT_FAILED = 'ADD_EVENT_FAILED';\r\nexport const LOAD_EVENTS_SUCCESS = 'LOAD_EVENTS_SUCCESS';\r\nexport const LOAD_EVENTS_FAILED = 'LOAD_EVENTS_FAILED';\r\nexport const GET_PRODUCTS_REQUEST = 'GET_PRODUCTS_REQUEST';\r\nexport const BOOK_DAY = 'BOOK_DAY';\r\nexport const BOOK_HOUR = 'BOOK_HOUR';","export const selectEvetns = state => state.homeReducer.events;\r\n","import React, {useEffect, useState, useRef} from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport moment from 'moment';\r\nimport { useSelector, useDispatch } from 'react-redux'; \r\nimport { postNewEventData } from '../../redux/actions/home.action';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport { getEventsData } from '../../redux/actions/home.action';\r\nimport { selectEvetns } from '../../redux/selectors/home.selector';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n      width: '25ch',\r\n    },\r\n  },\r\n  container: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n    flexDirection: \"column\",\r\n    alignItems: 'center',\r\n    padding: '100px 0'\r\n  },\r\n  textField: {\r\n    width: \"40%\",\r\n    marginBottom: 40\r\n  },\r\n  simpleSelect: {\r\n    width: '40%',\r\n    marginBottom: 40\r\n  },\r\n  selectEmpty: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nconst Home = () => {\r\n  const classes = useStyles();\r\n  const [name, setName ] = useState('');\r\n  const [description, setDescription] = useState('');\r\n  const formData = useRef({\r\n    date: new Date()\r\n  })\r\n  const { date } = formData.current \r\n  const [eventDate, setEventDate] = useState(moment(formData.current.date).format('YYYY-MM-DD'));\r\n  const [isDisabled, changeIsDisabled] = useState(true)\r\n  const [time, setTime] = React.useState('');\r\n  const handleChange = (event) => {\r\n    setTime(event.target.value);\r\n  };\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const eventsServer = useSelector(selectEvetns)\r\n\r\n  const mappedDates = eventsServer.map((i, index)=> {\r\n    return i.eventDate + i.time\r\n   })\r\n   \r\n  useEffect(() => {\r\n    dispatch(getEventsData());\r\n  \r\n    if(!mappedDates.includes(eventDate + time)) {\r\n      changeIsDisabled(false);\r\n    } else {\r\n      changeIsDisabled(true);\r\n      alert('this time is reserved, please chose another hours')\r\n    }\r\n  }, [eventDate, time])\r\n  \r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const data = {\r\n      name,\r\n      description,\r\n      eventDate,\r\n      time,\r\n    }\r\n    dispatch(postNewEventData(data, history));\r\n  }\r\n  return (\r\n        <form \r\n          className={classes.container} \r\n          noValidate \r\n          autoComplete=\"off\"\r\n        >\r\n          <TextField \r\n            id=\"standard-basic\" \r\n            label=\"Event\" \r\n            className={classes.textField}\r\n            value={name}\r\n            onChange={(e) => setName(e.target.value)}\r\n          />\r\n          <TextField \r\n            id=\"standard-basic\" \r\n            label=\"Description\" \r\n            className={classes.textField}\r\n            onChange={(e) => setDescription(e.target.value)}\r\n            value={description}\r\n          />\r\n          <TextField\r\n            id=\"date\"\r\n            label=\"Date\"\r\n            type=\"date\"\r\n            onChange={e => setEventDate(e.target.value.valueOf())}\r\n            className={classes.textField}\r\n            InputLabelProps={{\r\n              shrink: true,\r\n            }}\r\n          />\r\n          <InputLabel id=\"demo-simple-select-label\">\r\n            Time\r\n          </InputLabel>\r\n          <Select\r\n            className={classes.simpleSelect}\r\n            labelId=\"demo-simple-select-label\"\r\n            id=\"demo-simple-select\"\r\n            value={time}\r\n            onChange={handleChange}\r\n          >\r\n            <MenuItem value={16}>16:00</MenuItem>\r\n            <MenuItem value={18}>18:00</MenuItem>\r\n            <MenuItem value={20}>20:00</MenuItem>\r\n          </Select>\r\n          <Button variant=\"contained\" color=\"primary\" onClick={handleSubmit} disabled={isDisabled}>\r\n            Book event\r\n          </Button>\r\n        </form>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { getEventsData } from '../../redux/actions/home.action';\r\nimport { selectEvetns } from '../../redux/selectors/home.selector';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n      width: '20%',\r\n      textAlign: 'center',\r\n      margin: '20px 30px'\r\n    },\r\n    bullet: {\r\n      display: 'inline-block',\r\n      margin: '0 2px',\r\n      transform: 'scale(0.8)',\r\n    },\r\n    title: {\r\n      fontSize: 14,\r\n    },\r\n    pos: {\r\n      marginBottom: 12,\r\n    },\r\n  });\r\n\r\nconst EventList = () => {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const eventsServer = useSelector(selectEvetns);\r\n\r\n    const card = eventsServer.map(item => {\r\n      return(\r\n        <Card className={classes.root}>\r\n            <CardContent>\r\n                <Typography variant=\"h5\" component=\"h2\">\r\n                    {item.name}\r\n                </Typography>\r\n                <Typography className={classes.pos} color=\"textSecondary\">\r\n                    {item.description}\r\n                </Typography>\r\n                <Typography variant=\"body2\" component=\"p\">\r\n                    {item.eventDate}\r\n                </Typography>\r\n                <Typography variant=\"body2\" component=\"p\">\r\n                    {`${item.time}:00`}\r\n                </Typography>\r\n            </CardContent>\r\n        </Card>\r\n      )\r\n    })\r\n\r\n    useEffect(() => {\r\n        dispatch(getEventsData());\r\n    }, [dispatch]);\r\n    \r\n    return (\r\n        <div style={{\r\n            padding: '50px 0',\r\n            display: 'flex',\r\n            flexDirection: 'row',\r\n            flexWrap: 'wrap',\r\n            justifyContent: 'space-around'\r\n        }}\r\n        >\r\n            {card}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EventList;\r\n\r\n","import React from 'react';\r\nimport EventList from '../../components/eventList';\r\n\r\n\r\nconst Bucket = () => {\r\n    return(\r\n        <EventList />\r\n    );\r\n}\r\n\r\nexport default Bucket;","import React from 'react';\r\nimport Home from './pages/Home/index';\r\nimport Bucket from './pages/bucket/index';\r\n\r\nexport const routes = [\r\n    {\r\n        path: '/bookEvent/bucket',\r\n        component: <Bucket />, \r\n    },\r\n    {\r\n        path: '/bookEvent/',\r\n        component: <Home />,\r\n        exact: true\r\n    },\r\n    {\r\n        path: '*',\r\n        component: () => ( <div>page not found 404</div>)\r\n    }\r\n]","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from 'react-router-dom';\nimport { Layout } from './components/layout/index';\nimport { routes } from './routes';\n\nfunction App() {\n  return (\n    <Router>\n      <Layout>\n        <Switch>\n         {\n          routes.map(route => (\n            <Route exact={route.exact} path={route.path} key={route.toString()}>\n            {route.component}\n          </Route>\n          ))\n         }\n        </Switch>\n      </Layout>\n    </Router>\n  );\n}\n\nexport default App;\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { LOAD_EVENTS_SUCCESS } from '../actionTypes';\r\n\r\nconst initialState = {\r\n  events: [],\r\n};\r\n\r\nconst homeReducer = ( state = initialState, action) => {\r\n    switch(action.type) {\r\n      case LOAD_EVENTS_SUCCESS: {\r\n        console.log(action.payload)\r\n        return {\r\n          ...state,\r\n          events: action.payload\r\n        };\r\n      }\r\n      default:\r\n            return state\r\n    };\r\n};\r\n\r\nexport default homeReducer;","import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport homeReducer from './reducers/home.reducer';\r\n\r\nconst reducers = combineReducers({\r\n    homeReducer,\r\n})\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunk));\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}